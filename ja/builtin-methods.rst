組み込みメソッド
================
以前に述べたように、Zephir はオブジェクト指向プログラミングを推進していますので、
静的な型に関連した変数は、オブジェクトとして扱うことができます。

この２つのメソッドを比べてみてください。:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, strlen(s)) {
            let n = sprintf("%X", ch);
            if strlen(n) < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

そして:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, s->length()) {
            let n = ch->toHex();
            if n->length() < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

両方とも同じ機能ですが、２つめはオブジェクト指向プログラミングです。
Zephir では内部的にオブジェクト指向のコードを手続き型のコードに変換しますので、
静的型変数のメソッドを呼び出してもパフォーマンスに影響はありません。.

String
^^^^^^

文字列では下記の組み込みメソッドが使用できます。:

+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| オブジェクト指向      | 手続き型                                        | 説明                                                                             |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->length()           | strlen(s)                                       | 文字列の長さを取得する                                                           |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->trim()             | trim(s)                                         | 文字列の両端の空白などの文字を切り取る                                           |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->trimleft()         | ltrim(s)                                        | 文字列の先頭の空白などの文字を切り取る                                           |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->trimright()        | rtrim(s)                                        | 文字列の末尾の空白などの文字を切り取る                                           |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->index("foo")       | strpos(s, "foo")                                | 文字列内で、部分文字列が最初に現れる位置を探す                                   |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->lower()            | strtolower(s)                                   | 文字列を小文字に変換する                                                         |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->upper()            | strtoupper(s)                                   | 文字列を大文字に変換する                                                         |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->lowerfirst()       | lcfirst(s)                                      | 文字列の最初の文字を小文字に変換する                                             |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->upperfirst()       | ucfirst(s)                                      | 文字列の最初の文字を大文字に変換する                                             |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->format()           | sprintf(s, "%s", x)                             | 書式変換された文字列を返す                                                       |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->md5()              | md5(s)                                          | 文字列の md5 ハッシュ値を計算する                                                |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| s->sha1()             | sha1(s)                                         | 文字列の sha1 ハッシュ値を計算する                                               |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+

Array
^^^^^

配列では下記の組み込みメソッドが使用できます。:

+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| オブジェクト指向      | 手続き型                                        | 説明                                                                             |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->join(" ")          | join(" ", a)                                    | 配列要素に文字列を追加する                                                       |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->rev()              | array_reverse(a)                                | 配列の要素を逆順にして返す                                                       |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->reversed()         | array_reverse(a)                                | 配列の要素を逆順にして返す                                                       |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->diff()             | array_diff(a)                                   | 配列の差を計算する                                                               |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->flip()             | array_flip(a)                                   | 配列のキーと値を反転する                                                         |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->walk()             | array_walk(a)                                   | 配列の全ての要素にユーザー定義の関数を適用する                                   |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->hasKey()           | array_key_exists(a)                             | 指定したキーまたは添字が配列にあるかどうかを調べる                               |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->keys()             | array_keys(a)                                   | 配列のキーすべて、あるいはその一部を返す                                         |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->values()           | array_values(a)                                 | 配列の全ての値を返す                                                             |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->split()            | array_chunk(a)                                  | 配列を分割する                                                                   |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->combine(b)         | array_combine(a, b)                             | 一方の配列をキーとして、もう一方の配列を値として、ひとつの配列を生成する         |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->intersect(b)       | array_intersect(a, b)                           | 配列の共通項を計算する                                                           |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->merge(b)           | array_merge(a, b)                               | ひとつまたは複数の配列をマージする                                               |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+
| a->pad()              | array_pad(a, b)                                 | 指定長、指定した値で配列を埋める                                                 |
+-----------------------+-------------------------------------------------+----------------------------------------------------------------------------------+

Char
^^^^

文字では下記の組み込みメソッドが使用できます。:

+-----------------------+-------------------------------------------------+
| オブジェクト指向      | 手続き型                                        |
+-----------------------+-------------------------------------------------+
| ch->toHex()           | sprintf("%X", ch)                               |
+-----------------------+-------------------------------------------------+

Integer
^^^^^^^

数値では下記の組み込みメソッドが使用できます。:

+-----------------------+-------------------------------------------------+
| オブジェクト指向      | 手続き型                                        |
+-----------------------+-------------------------------------------------+
| i->abs()              | abs(i)                                          |
+-----------------------+-------------------------------------------------+
