演算子
======
Zephir の演算子は PHP とよく似ており、その挙動の一部を継承しています。


代数演算子
----------
下記の演算子がサポートされます。:

+-------------------+-----------------------------------------------------+
| 演算子            | 例                                                  |
+-------------------+-----------------------------------------------------+
| 負にする          | -a                                                  |
+-------------------+-----------------------------------------------------+
| 加算              | a + b                                               |
+-------------------+-----------------------------------------------------+
| 減算              | a - b                                               |
+-------------------+-----------------------------------------------------+
| 乗算              | a * b                                               |
+-------------------+-----------------------------------------------------+
| 除算              | a / b                                               |
+-------------------+-----------------------------------------------------+
| 剰余              | a % b                                               |
+-------------------+-----------------------------------------------------+

比較演算子
----------
比較演算子は比較する変数の型に依存します。
例えば、比較する変数が動的変数の場合の挙動は PHP と同じです。:

+----------+--------------------------+------------------------------------------------------------------+
| a == b   | 等しい                   | 型の相互変換をした後で a が b に等しい時に TRUE。                |
+----------+--------------------------+------------------------------------------------------------------+
| a === b  | 等しい                   | a が b に等しく、および同じ型である場合に TRUE 。                |
+----------+--------------------------+------------------------------------------------------------------+
| a != b   | 等しくない               | 型の相互変換をした後で a が b に等しくない場合に TRUE。          |
+----------+--------------------------+------------------------------------------------------------------+
| a <> b   | 等しくない               | 型の相互変換をした後で a が b に等しくない場合に TRUE。          |
+----------+--------------------------+------------------------------------------------------------------+
| a !== b  | 等しくない               | a が b と等しくないか、同じ型でない場合に TRUE 。                |
+----------+--------------------------+------------------------------------------------------------------+
| a < b    | より少ない               | a が b より少ない時に TRUE。                                     |
+----------+--------------------------+------------------------------------------------------------------+
| a > b    | より多い                 | a が b より多い時に TRUE。                                       |
+----------+--------------------------+------------------------------------------------------------------+
| a <= b   | より少ないか等しい       | a が b より少ないか等しい時に TRUE。                             |
+----------+--------------------------+------------------------------------------------------------------+
| a >= b   | より多いか等しい         | a が b より多いか等しい時に TRUE。                               |
+----------+--------------------------+------------------------------------------------------------------+

例:

.. code-block:: zephir

    if a == b {
        return 0;
    } else {
        if a < b {
            return -1;
        } else {
            return 1;
        }
    }

論理演算子
----------
下記の演算子がサポートされます。:

+-------------------+-----------------------------------------------------+
| 演算子            | 例                                                  |
+-------------------+-----------------------------------------------------+
| 論理積            | a && b                                              |
+-------------------+-----------------------------------------------------+
| 論理和            | a || b                                              |
+-------------------+-----------------------------------------------------+
| 否定              | !a                                                  |
+-------------------+-----------------------------------------------------+

例:

.. code-block:: zephir

    if a && b || !c {
        return -1;
    }
    return 1;

ビット演算子
------------
下記の演算子がサポートされます。:

+---------------------+------------------------------------------------------+
| 演算子              | 例                                                   |
+---------------------+------------------------------------------------------+
| ビット積            | a & b                                                |
+---------------------+------------------------------------------------------+
| ビット和            | a | b                                                |
+---------------------+------------------------------------------------------+
| 排他的論理和        | a ^ b                                                |
+---------------------+------------------------------------------------------+
| 否定                | ~a                                                   |
+---------------------+------------------------------------------------------+
| 左シフト            | a << b                                               |
+---------------------+------------------------------------------------------+
| 右シフト            | a >> b                                               |
+---------------------+------------------------------------------------------+

例:

.. code-block:: zephir

    if a & SOME_FLAG {
        echo "has some flag";
    }

動的変数の比較に関する詳細は、`PHPのマニュアル`_ を参照してください。

三項演算子
----------
Zephir は C言語や PHP のように三項演算子をサポートしています。:

.. code-block:: zephir

    let b = a == 1 ? "x" : "y"; // b には、 a が 1 の場合は "x" が、そうでなければ "y" がセットされる

特殊演算子
----------
下記の演算子がサポートされます。:

Empty
^^^^^
この演算子は、式が空であるかを確認することができます。
「空」とは、式が null か、空文字列か、配列が空であるということを意味します。:

.. code-block:: zephir

    let someVar = "";
    if empty someVar {
        echo "is empty!";
    }

    let someVar = "hello";
    if !empty someVar {
        echo "is not empty!";
    }

Isset
^^^^^
この演算子は、配列やオブジェクトでインデックスやプロパティが定義されているかを確認します。:

.. code-block:: zephir

    let someArray = ["a": 1, "b": 2, "c": 3];
    if isset someArray["b"] { // 配列にインデックス "b" があるか
        echo "yes, it has an index 'b'\n";
    }

'isset' を使って式を返します:

.. code-block:: zephir

    return isset this->{someProperty};

Zephir の 'isset' は、PHP の array_key_exists_ のように動作する事に注意してください。
Zephir の 'isset' は配列のインデックスやプロパティが null でも true を返します。

Fetch
^^^^^
'Fetch' は PHP での共通の処理を減らして１つの命令にまとめた演算子です。:

.. code-block:: php

    <?php

    if (isset($myArray[$key])) {
        $value = $myArray[$key];
        echo $value;
    }

Zephir では同じコードを下記のように書く事ができます。:

.. code-block:: zephir

    if fetch value, myArray[key] {
        echo value;
    }

'Fetch' は配列に有効な 'key' が存在する場合は true を返します。

Typeof
^^^^^^
この演算子は変数の型をチェックします。
'Typeof' は比較演算子と同じように使えます。:

.. code-block:: zephir

    if (typeof str == "string") { // or !=
        echo str;
    }

また、 typeof は PHP の関数 'gettype' のような働きをします。

.. code-block:: zephir

    return typeof str;

**注意**: オブジェクト要素が「呼び出し可能か」をチェックしたい場合は、常に 'typeof'を
使用する必要があります。

型のヒント
^^^^^^^^^^
Zephir はオブジェクトと推測される変数にアクセスまたは呼び出された時に、
常にそのプロパティまたはメソッドが実装されているかどうかを確認しようとします。:

.. code-block:: zephir

    let o = new MyObject();

    // Zephir は MyObject に "myMethod" が実装されているか確認する
    o->myMethod();

しかし PHP から継承されたダイナミズムによって
オブジェクトのクラスを知る事は容易ではないため、
時々 Zephir が容易にエラーレポートが生成できない事があります。
型のヒントはコンパイラに、動的変数のクラスに関するコンパイルチェックをさせます。:

.. code-block:: zephir

    // コンパイラに "o" が MyClass のインスタンスであることを伝える
    let o = <MyClass> this->_myObject;
    o->myMethod();

これらの型のヒントは弱く、そのクラスが特定のクラスのインスタンスか、または
特定のインターフェイスを実装しているか、をプログラム実行時にはチェックしていません。
もしあなたが実行時にチェックしたいなら、下記のようにします。:

.. code-block:: zephir

    // プロパティが MyClass のインスタンスかどうか、代入前に毎回チェックする
    let o = <MyClass!> this->_myObject;
    o->myMethod();

分岐予測のヒント
^^^^^^^^^^^^^^^^
分岐予測とはなんでしょう？ `こちら`_ の記事か `Wikipedia の記事`_ をチェックしてください。
性能が非常に重要な環境では、これらのヒントの導入が役立つかもしれません。

次の例を考えてみましょう。:

.. code-block:: zephir

    let allPaths = [];
    for path in this->_paths {
        if path->isAllowed() == false {
            throw new App\Exception("error!!");
        } else {
            let allPaths[] = path;
        }
    }

上記のコードの作者は、例外をスローするケースが生じるケースが稀であるということが
事前に分かっています。
これは毎回メソッドを実行しても、 99.9% は式が真にならない(falseにならない)ことを意味します。
プロセッサがこれを理解することは難しいので、下記のようにヒントを記述します。:

.. code-block:: zephir

    let allPaths = [];
    for path in this->_paths {
        if unlikely path->isAllowed() == false {
            throw new App\Exception("error!!");
        } else {
            let allPaths[] = path;
        }
    }

.. _`array_key_exists`: http://www.php.net/manual/ja/function.array-key-exists.php
.. _`PHPのマニュアル`: http://www.php.net/manual/ja/language.operators.comparison.php
.. _`こちら`: http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/
.. _`Wikipedia の記事`: https://ja.wikipedia.org/wiki/%E5%88%86%E5%B2%90%E4%BA%88%E6%B8%AC
