なぜZephir?
===========
今日のPHPアプリケーションは、安定性・パフォーマンス・機能性を含む様々な課題に対してバランスを
取る必要があります。また、全てのPHPアプリケーションは、ほとんどのアプリケーションがベースとしている
共通コンポーネントをベースとしています。

これらの共通コンポーネントはライブラリやフレームワーク、またはそれらの組み合わせたものです。
フレームワークは一度インストールするとめったに変更されず、アプリケーションの基盤として非常に
機能的で高速でなくてはなりません。

高速かつ堅牢なライブラリを導入すると、一般的に高レベルの抽象化によって実装が複雑になる事があります。
基本ライブラリやフレームワークがほとんど変更されないということを考えると、コンパイルを活用して
パフォーマンスとリソース消費を改善したエクステンションを構築するよい機会です。

Zephirを使用すれば、PHPから使用可能で、ユーザーエクスペリエンスを向上させつつもより高速な
アプリケーションを作る助けになるような、オブジェクト指向のライブラリ・フレームワーク・アプリケーションを
実装することができます。

あなたがPHPプログラマなら・・・
-------------------------------
PHPは、Webアプリケーションの開発に使用される言語の中で最も人気のある言語の一つです。
PHPのような動的型付けのインタプリタ言語は、その柔軟性によって非常に高い生産性を提供します。

バージョン4及びその後の5以来、PHPはZendエンジンの実装に基づいています。これは、バイトコードから
PHPコードを実行する仮想マシンです。 
Zendエンジンはほぼ全てのPHP環境でインストールされており、あなたはZephirを使って、Zendエンジンの
下で動作するPHP用の拡張機能を作成可能です。

PHPはZephirをホスティングしており、両者は明らかに多くの類似点を持っています。しかし両者の重要な
違いとして、Zephirには独自の個性が与えられています。
例えば、Zephirはより厳格であり、PHPよりもコンパイル作業の分だけ生産性が低下します。

あなたがCプログラマなら・・・
-----------------------------
C言語はこれまでの言語の中でも最も強力で人気の言語のひとつです。
実際、PHPはC言語で書かれており、それがPHP拡張機能が利用可能な理由のひとつでもあります。
C言語はメモリ管理や基本的な型やインラインアセンブリルーチンさえ自由に使用可能なのです。

しかしC言語での大規模アプリケーションの開発は、PHPやZephirに比べて時間がかかりますし、
あなたが経験豊かな開発者でなければエラーを見つけるのも難しいでしょう。

Zephirは安全であるよう設計されていますので、ポインタや手動のメモリ操作は実装していません。
ですからもしあなたがC言語のプログラマなら、ZephirはC言語ほど強力ではないけれど
使いやすい言語だと感じるでしょう。

コンパイル言語 vs インタプリタ言語
----------------------------------
コンパイル言語は実行前にコンパイルの一手間が必要になりますので、通常開発速度が遅くなります。
また、インタプリタ言語は生産性優先でパフォーマンスが低下する傾向があります。
時にはインタプリタ言語とコンパイル言語のコードの速度性能に大きな違いはありません。

Zephirでは、インタプリタ言語であるPHPから呼び出される、あなたのプログラムをコンパイルする
必要があります。

一度コンパイルされたプログラムはもうコンパイルする必要がありません。ですがインタプリタ言語の
プログラムは実行時に毎回解釈される必要があります。
開発者はアプリケーションのパーツをZephirで実装するかしないかを決めることができます。

静的型付け言語 vs 動的型付け言語
--------------------------------
一般的に静的型付け言語において、変数はその存続期間中は特定の型にバインドされます。
その型を途中変更することはできず、ただ互換性のある型のインスタンスの参照や操作ができるだけです。
CやC++のような言語では仕組みとして実現されています。:

.. code-block:: c

	int a = 0;
	a = "hello"; // 許されない

動的型付けでは、型は変数ではなく値にバインドされます。そこでまず型の値を参照し、それから
直接連携しない変数に割り当てられます。
JavascriptやPHPといった動的型付け言語の例は下記の通りです。:

.. code-block:: zephir

	var a = 0;
	a = "hello"; // 許される

生産性という利点はありますが、動的型付け言語は（特に非常に大規模なプログラムや高いパフォーマンスの
求められる場合は）、全てのアプリケーションで最適な選択とは限りません。

PHPのような動的言語のパフォーマンスの最適化をおこなうことは、C言語のような静的言語で
おこなうよりもずっと挑戦的です。
静的言語では、オプティマイザが判断をおこなうために型情報を利用することができます。
動的言語ではオプティマイザのための手掛かりが少なく、最適化の判断が困難です。

動的言語の最適化に関する最近の進歩は、（JITコンパイルのように）期待されていますが、
それは静的言語向けの最先端の技術に後れを取っています。あなたが高いパフォーマンスを求めるのであれば、
恐らく静的言語はより安全な選択肢となるでしょう。

静的言語のもう１つの小さな利点は、コンパイル時にコンパイラがチェックを行うということです。
コンパイラは重要なロジックのエラーを見つけることはできませんが、動的言語で実行時にしか
見つけられないエラーを事前に見つけることができます。

Zephirでは静的・動的の両方の型付けの利用を可能にしています。

コンパイル機構
--------------
Zephirはネイティブコードを生成（現在はCコンパイラを介して）し、gcc/clang/vc++といったコンパイラが
最適化とマシンコードへのコンパイルを行います。
下図は各プロセスがどのように機能するかを表しています。:

.. figure:: ../_static/img/scheme.png
    :align: center

Zephirが提供するものに加え、コンパイルしたアプリケーションの性能が向上するようにコンパイラも
成熟していっています。:

* `GCC optimizations <http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Optimize-Options.html>`_
* `LLVM passes <http://llvm.org/docs/Passes.html>`_
* `Visual C/C++ optimizations <http://msdn.microsoft.com/en-us/library/k1ack8f1.aspx>`_

コードの保護
------------
いくつかの状況ではコンパイルによってパフォーマンスが著しく向上しない場合があります。
これはCPUやメモリよりもI/Oがボトルネックになっていることが考えられます。
しかしコンパイルしたコードは、あなたのアプリケーションの知的保護ももたらしくれる可能性があります。
Zephirではネイティブバイナリを生成することで、ユーザーや顧客からオリジナルのコードを「隠す」ことが
できます。

結論
----
Zephirとは、PHPやC言語にとって代わるものではなく、それらを補完し、開発者がコンパイルと静的型付けに
挑むことができるようにするものだと考えています。
Zephirはまさに、C言語とPHPの世界から良いものを取り込み、それらのアプリケーションを高速に
作成する機会を探す試みなのです。
